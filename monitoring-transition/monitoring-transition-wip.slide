Monitoring transition

Saurabh Hirani
@sphirani
saurabh.hirani@gmail.com

* 

.image images/sardonic-server-switch-off-phones.png 

* Problem

- What does it take to move from manual to automated to distributed monitoring?

* What this talk is about

- Questions to ask yourself if you monitor manually
- Where to start, how to measure progress, how to cutover?
- A -> B - problems of point A, process to transition to point B
- A == nagios (replace by your manually setup monitoring solution)
- B == icinga2 (replace by what you want to automate)

* What this talk is NOT about

- X vs Y
- Yet another Nagios rant
- Yet another automated monitoring benefits hand waving

* Infrastructure in context

- Physical servers
- AWS
- VMware
- Network devices
- All of the above in multiple environments

* Pre-nirvana setup

- One big, bad icinga (1.x - nagios compat) host
- Thousands of hosts, tens of thousands of checks
- Hosts, hostgroups, checks, scripts added manually
- Configs scattered through the filesystem
- No self service
- Blocked by the in-house monitoring guy / scapegoat

* Face it

- It works because...

.image images/sardonic-server-users.png

* The price

- Are the 100 new hosts I added over the weekend monitored?
- The network team added 2 new switches - they are monitored, right?
- Why am I getting alerts about decomissioned hosts?
- How do I build tooling around it?

* Sink this in

- That which monitors snowflakes becomes a snowflake that no one monitors
- Don't walk into an antique shop and expect something new

* The hard truth

- Monsters are not born. They are created. One git commit at a time.
- Buckle up and clean up the mess
- Finish what you start

* Better said than done

- Monitoring systems don't have a downtime
- Transparent cutover expected
- Show measurable progress

* What you are really solving

- Audit - Is everything "monitorable"?
- Fix what you can - clean chef roles, environments, AWS tags, etc.
- Zoom out and see patterns
- Rinse, repeat == everything is monitorable

* Revisit your monitoring strategy

- Monitor hosts where X == Y
- Equally important ignore hosts where A == B
- Pull data from multiple DBs (Chef, AWS, etc.)
- Different levels of host grouping - location, functionality, product, etc.
- How cleanly does it fit into my existing ecosystem
- Choice: icinga2
- Sample config of host and service

* The process

- Info gathering a parallel setup
- Build a parallel setup
- Progressive cutover

* Info gathering for parallel setup

.link https://trello.com/b/CS2kmrSE Checklist
- Demos:
  - nagira, nagios-api
  - fpm
  - jsonalyzer

* Heads down homework - I

- Find manually added hosts and checks
- Categorize hosts by sources
- Categorize hostgroups by host attributes
- Categorize checks by hostgroups
- Audit check scripts

* Heads down homework - II

- Consolidate server side checks
- Distribute client side checks
- Sideline the snowflakes
- Build a parallel setup

* Parallel setup

- Configs generated from host sources
- Server side checks through packages
- Client side checks through individual recipes
- Notifications to a closed group
- A daemon which adds, edits, delete hosts as they come and go
- Ready to cutover

* Walk up and buy in

- on what you can break
- Multiple environments to cutover from
- Target the low hanging fruits

* Progressive cutover

.link https://trello.com/b/tnqDePLZ Checklist
- Demos:
  - icinga2_api
  - nagios-to-icinga2

* Heads down, cutover time

- Prioritize order
- icinga2: enable notifications
- nagios: disable notifications
- automate to rollback
- bake and kill

* Monitor the monitor

.image images/sardonic-server-resources.png

* Distributed checks

- One master, multiple slaves - icinga2 feature
- If you designed the previous steps correctly, horizontal scalability is a side effect

* The fun stuff

- It's fun because you have a solid foundation
- REST API tools - chat bots, upgrades, downtimes, notifications
.link https://github.com/saurabh-hirani/icinga2-api-examples icinga2-api-examples
.link https://github.com/saurabh-hirani/icinga2_api icinga2_api

* Takeaways

- Cleanup is insightful
- Automate for the maintainers 
- Catch yourself cheating
- The rent is due everyday

* Conclusion

  - “All happy families are alike; each unhappy family is unhappy in its own way.”
    Leo Tolstoy

  happy == automated
  unhappy == manual
  family == monitoring setup

- Catch me to talk about your manual monitoring pain points
- Questions?
